section .text
 
 
; Принимает код возврата и завершает текущий процесс
exit: 
    mov rax, 60    ; Номер системного вызова 'exit' (60 для x86-64)
    syscall        ; Вызов системного вызова 'exit'


; Принимает указатель на нуль-терминированную строку, возвращает её длину
string_length:
    mov rax, rsi
    xor rcx, rcx
str_len_loop:
    cmp byte [rax], 0
    jz string_length_done
    inc rax
    inc rcx
    jmp str_len_loop

string_length_done:
    mov rax, rcx
    ret

; Принимает указатель на нуль-терминированную строку, выводит её в stdout
print_string:
    xor rax, rax
    ret

; Принимает код символа и выводит его в stdout
print_char:
    mov rsi, rsp-1
    mov [rsi], rax
    mov rdi, 1 ; stdout descriptor
 mov rdx, 1
mov rax, 1 ; 'write' syscall number
 syscall
    ret

; Переводит строку (выводит символ с кодом 0xA)
print_newline:
    xor rax, rax
    ret

; Выводит беззнаковое 8-байтовое число в десятичном формате 
; Совет: выделите место в стеке и храните там результаты деления
; Не забудьте перевести цифры в их ASCII коды.
print_uint:
    xor rax, rax
    ret

; Выводит знаковое 8-байтовое число в десятичном формате 
print_int:
    xor rax, rax
    ret

; Принимает два указателя на нуль-терминированные строки, возвращает 1 если они равны, 0 иначе
string_equals:
    xor rax, rax
    ret

; Читает один символ из stdin и возвращает его. Возвращает 0 если достигнут конец потока
read_char:
    xor rax, rax
    ret 

; Принимает: адрес начала буфера, размер буфера
; Читает в буфер слово из stdin, пропуская пробельные символы в начале, .
; Пробельные символы это пробел 0x20, табуляция 0x9 и перевод строки 0xA.
; Останавливается и возвращает 0 если слово слишком большое для буфера
; При успехе возвращает адрес буфера в rax, длину слова в rdx.
; При неудаче возвращает 0 в rax
; Эта функция должна дописывать к слову нуль-терминатор

read_word:
    ret
 

; Принимает указатель на строку, пытается
; прочитать из её начала беззнаковое число.
; Возвращает в rax: число, rdx : его длину в символах
; rdx = 0 если число прочитать не удалось
parse_uint:
    mov r10, 10
    xor rax, rax
    xor rcx, rcx
    xor r11, rdi
    .loop:
    mov cl, [rdi]
    sub cl, "0"
    jb .end
    cmp cl, 9
    ja .end

    mul r10
    add rax, rcx

    inc rdi
    jmp .loop

    .end:
        sub rdi, r11
        mov rdx, rdi
        ret    




; Принимает указатель на строку, пытается
; прочитать из её начала знаковое число.
; Если есть знак, пробелы между ним и числом не разрешены.
; Возвращает в rax: число, rdx : его длину в символах (включая знак, если он был) 
; rdx = 0 если число прочитать не удалось
parse_int:
    xor rax, rax
    ret 

; Принимает указатель на строку, указатель на буфер и длину буфера
; Копирует строку в буфер
; Возвращает длину строки если она умещается в буфер, иначе 0
string_copy:
    xor rax, rax
    ret




section .data
message: db 'hello, world!', 10,0
section .text
global _start
_start:

 mov rdi, 1 ; stdout descriptor
 mov rsi, message ; string address
 call string_length
 mov rdx, rax
mov rax, 1 ; 'write' syscall number
 syscall
 
mov rax, 65

         ; Системный вызов для записи (sys_write)
    mov edi, 1          ; Дескриптор файла для stdout
    lea rsi, [rsp-1]    ; Адрес символа
    mov [rsi], al       ; Поместить символ в память
    mov edx, 1          ; Длина данных для записи (1 байт)
    mov eax, 1 
    syscall

 call exit